
# run again.  Do not edit this file unless you know what you are doing.

import  random, math, utils.pdfCreator as pdfCreator
from PyQt5 import QtCore, QtGui, QtWidgets
from DatabaseMng import selector, creator

class Ui_addNewBankAccount(QtWidgets.QMainWindow):
    
    def __init__(self):
        super().__init__()
        
        self.setupUi()
        num = 0
        p1,p2,longID, valute = "","","",""
        self.num = num
        self.p1 = p1
        self.p2 = p2
        self.valute = valute
        
        
    def back_to_main_manu(self, window1):
        self.window1 = window1
    def back_to_main(self):
        self.close()
        self.window1.show()
    

    def setupUi(self):
        self.setObjectName("addNewBankAccount")
        self.setWindowModality(QtCore.Qt.NonModal)
        self.resize(687, 394)
        self.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(20, 40, 111, 16))
        self.label.setObjectName("label")
        self.groupBox = QtWidgets.QGroupBox(self)
        self.groupBox.setGeometry(QtCore.QRect(350, 30, 311, 141))
        self.groupBox.setObjectName("groupBox")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(20, 50, 111, 16))
        self.label_3.setObjectName("label_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(20, 20, 111, 16))
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(20, 80, 111, 16))
        self.label_4.setObjectName("label_4")
        self.first_name = QtWidgets.QLineEdit(self.groupBox)
        self.first_name.setGeometry(QtCore.QRect(170, 20, 131, 20))
        self.first_name.setReadOnly(True)
        self.first_name.setObjectName("first_name")
        self.last_name = QtWidgets.QLineEdit(self.groupBox)
        self.last_name.setGeometry(QtCore.QRect(170, 50, 131, 20))
        self.last_name.setReadOnly(True)
        self.last_name.setObjectName("last_name")
        self.a_of_living = QtWidgets.QLineEdit(self.groupBox)
        self.a_of_living.setGeometry(QtCore.QRect(170, 80, 131, 20))
        self.a_of_living.setReadOnly(True)
        self.a_of_living.setObjectName("a_of_living")
        self.searchingbyID = QtWidgets.QLineEdit(self)
        self.searchingbyID.setGeometry(QtCore.QRect(130, 40, 181, 20))
        self.searchingbyID.setObjectName("searchingbyID")
        self.searchingbyID.textChanged.connect(self.SearchbyID)
        
        self.groupBox_2 = QtWidgets.QGroupBox(self)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 200, 471, 161))
        self.groupBox_2.setObjectName("groupBox_2")
        
        
        self.radioButtonRSD = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButtonRSD.setGeometry(QtCore.QRect(10, 30, 82, 17))
        self.radioButtonRSD.setObjectName("radioButtonRSD")
        self.radioButton_USD = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_USD.setGeometry(QtCore.QRect(10, 50, 82, 17))
        self.radioButton_USD.setObjectName("radioButton_USD")
        self.radioButton_Euro = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_Euro.setGeometry(QtCore.QRect(10, 70, 82, 17))
        self.radioButton_Euro.setObjectName("radioButton_Euro")
        self.buttonGroup = QtWidgets.QButtonGroup(self)
        self.buttonGroup.addButton(self.radioButton_Euro)
        self.buttonGroup.addButton(self.radioButtonRSD)
        self.buttonGroup.addButton(self.radioButton_USD)
        self.buttonGroup.setExclusive(True)


        self.Create = QtWidgets.QPushButton(self.groupBox_2)
        self.Create.setGeometry(QtCore.QRect(10, 120, 75, 23))
        self.Create.setObjectName("Create")
        self.Create.clicked.connect(self.generateNewAcc)
        
        self.createPdf = QtWidgets.QPushButton(self.groupBox_2)
        self.createPdf.setGeometry(QtCore.QRect(90, 120, 111, 23))
        self.createPdf.setObjectName("createPdf")
        self.createPdf.clicked.connect(lambda: self.insert_and_print( self.p1, self.p2,self.valute))

        self.Clear2 = QtWidgets.QPushButton(self.groupBox_2)
        self.Clear2.setGeometry(QtCore.QRect(210, 120, 81, 23))
        self.Clear2.setObjectName("Clear2")
        self.Clear2.clicked.connect(self.clear2)
        

        self.shortID = QtWidgets.QLineEdit(self.groupBox_2)
        self.shortID.setGeometry(QtCore.QRect(270, 40, 171, 20))
        self.shortID.setReadOnly(True)
        self.shortID.setObjectName("shortID")
        self.longID1 = QtWidgets.QLineEdit(self.groupBox_2)
        self.longID1.setGeometry(QtCore.QRect(270, 70, 171, 20))
        self.longID1.setReadOnly(True)
        self.longID1.setObjectName("longID")
        self.label_6 = QtWidgets.QLabel(self.groupBox_2)
        self.label_6.setGeometry(QtCore.QRect(140, 40, 81, 20))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(140, 70, 91, 20))
        self.label_7.setObjectName("label_7")
        self.pushButton_4 = QtWidgets.QPushButton(self)
        self.pushButton_4.setGeometry(QtCore.QRect(200, 100, 111, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.Clear1)

        self.Close = QtWidgets.QPushButton(self)
        self.Close.setGeometry(QtCore.QRect(580, 340, 71, 23))
        self.Close.setObjectName("Close")
        self.Close.clicked.connect(self.back_to_main)
        self.label_5 = QtWidgets.QLabel(self)
        self.label_5.setGeometry(QtCore.QRect(110, 70, 161, 20))
        self.label_5.setObjectName("label_5")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("addNewBankAccount", "Add New Bank Account"))
        self.label.setText(_translate("addNewBankAccount", "Enter a Personal NO"))
        self.groupBox.setTitle(_translate("addNewBankAccount", "Client informations"))
        self.label_3.setText(_translate("addNewBankAccount", "Last Name:"))
        self.label_2.setText(_translate("addNewBankAccount", "First name:"))
        self.label_4.setText(_translate("addNewBankAccount", "Adress of living:"))
        self.groupBox_2.setTitle(_translate("addNewBankAccount", "Create a new bank account"))
        self.radioButtonRSD.setText(_translate("addNewBankAccount", "RSD"))
        self.radioButton_USD.setText(_translate("addNewBankAccount", "USD"))
        self.radioButton_Euro.setText(_translate("addNewBankAccount", "Euro"))
        self.Create.setText(_translate("addNewBankAccount", "Create"))
        self.createPdf.setText(_translate("addNewBankAccount", "Creat pdf"))
        self.Clear2.setText(_translate("addNewBankAccount", "Clear"))
        self.label_6.setText(_translate("addNewBankAccount", "Bank Acoount ID"))
        self.label_7.setText(_translate("addNewBankAccount", " Bank Acc Number"))
        self.pushButton_4.setText(_translate("addNewBankAccount", "Clear"))
        self.Close.setText(_translate("addNewBankAccount", "Close"))
        self.label_5.setText(_translate("addNewBankAccount", "Person is not found in database"))
    
    def SearchbyID(self):
        if selector.select_bank_user_data(self.searchingbyID.text()) == None:
            self.label_5.setText("User is not yet found")
            self.first_name.clear()
            self.last_name.clear()
            self.a_of_living.clear()
        else:
            self.label_5.setText("User is found")
            p = selector.select_bank_user_data(self.searchingbyID.text())
            self.p1 = p[0]
            self.p2 = p[1]
            self.first_name.insert(p[0])
            self.last_name.insert(p[1])
            self.a_of_living.insert(p[2])

    def generateNewAcc(self):
        if selector.select_bank_user_data(self.searchingbyID.text()) is None:
            mesb = "User is not Bank's client"
            self.popupMessage(mesb)
        elif self.radioButtonRSD.isChecked() or self.radioButton_USD.isChecked() or self.radioButton_Euro.isChecked():
            while True:
                num = 0
                num = random.randint(0,99999)
                
                p = self.chackeifexist(num)
                
                if p == "Same":
                    continue
                if p == "Not Same":
                    
                    self.shortID.insert(str(num))
                    print('tzpe of shortID')
                    print( type(self.shortID))
                    bankID = 256
                    strbank = int(str(bankID)+((13-len(str(num)))*'0')+str(num))
                    checkNum = 98-((strbank*100)%97)
                    if len(str(checkNum))==1:
                        checkNum ="0"+str(checkNum)
                    else:
                        checkNum=str(checkNum)
                    longACC = str(bankID)+"-"+str(((13-len(str(num)))*'0')+str(num))+"-"+str(checkNum)
                    
                    self.longID1.insert(longACC)
                    self.Create.setEnabled(False)
                    if self.radioButtonRSD.isChecked():
                        valute = "RSD" 
                    if self.radioButton_USD.isChecked():
                       valute = "USD"
                    else:
                       valute = "Euro" 
                    
                    creator.add_bank_account(self.searchingbyID.text(),valute,num,int(str(strbank)+checkNum))
                break
        else:  
            mesb = "Please select Currency"
            self.popupMessage(mesb)
  
    def chackeifexist(self,num):
        num1 = selector.select_all_short_bankID()  
        print(num1)  
        if num1 == []:
            print('kurabaja')
            return "Not Same"

        for i in num1:
            if i == num:
                return "Same"
            else:
                return "Not Same"
        
    def popupMessage(self,mesb):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Message")
        msg.setText(f"{mesb}")
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.addButton(QtWidgets.QMessageBox.Ok)
        msg.exec_()

    def clear2(self):    
        self.Create.setEnabled(True)
        self.longID1.clear()
        self.shortID.clear()
        self.buttonGroup.setExclusive(False)
        self.radioButton_USD.setChecked(False)
        self.radioButton_Euro.setChecked(False)
        self.radioButtonRSD.setChecked(False)
        self.buttonGroup.setExclusive(True)

    def insert_and_print(self,p1,p2,valute):
        try:
            num = self.shortID.text()
            longID = self.longID1.text()
            pdfCreator.card_creatot(f"card_for_{num}.pdf",num,longID,p1,p2,valute)
        except:
            self.popupMessage("The bank account number is not define111d")
    def Clear1(self):
        self.first_name.clear()
        self.last_name.clear()
        self.a_of_living.clear()
        self.searchingbyID.clear()


